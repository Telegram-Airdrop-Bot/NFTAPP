TEST.JS INTEGRATION GUIDE
=========================

‡¶è‡¶á guide-‡¶è ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá ‡¶Ø‡ßá test.js ‡¶è‡¶∞ functions API server-‡¶è ‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá apply ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§

INTEGRATION STATUS
-----------------
‚úÖ test.js functions API server-‡¶è successfully integrate ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá

FILES CREATED/UPDATED
====================

1. ‚úÖ api-server/test_js.js
   - test.js ‡¶è‡¶∞ ‡¶∏‡¶¨ functions copy ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá
   - NFT verification logic add ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá
   - Command line arguments support ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá

2. ‚úÖ api-server/package.json
   - Node.js dependencies add ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá
   - @solana/web3.js ‡¶è‡¶¨‡¶Ç @metaplex-foundation/js add ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá

3. ‚úÖ api-server/verifier_js.py
   - test_js.js file properly call ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø update ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá
   - Better error handling add ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá
   - Output parsing improve ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá

4. ‚úÖ api-server/render.yaml
   - npm install command add ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá
   - Node.js dependencies install ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø configure ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá

FUNCTIONS INTEGRATED
===================

‚úÖ getSolBalance(walletAddress)
   - SOL balance check ‡¶ï‡¶∞‡ßá
   - Lamports to SOL conversion ‡¶ï‡¶∞‡ßá

‚úÖ listNFTs(walletAddress)
   - Metaplex ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶∏‡¶¨ NFTs fetch ‡¶ï‡¶∞‡ßá
   - NFT count return ‡¶ï‡¶∞‡ßá
   - NFT details log ‡¶ï‡¶∞‡ßá

‚úÖ listSPLTokens(walletAddress)
   - SPL tokens fetch ‡¶ï‡¶∞‡ßá
   - Non-zero balance tokens filter ‡¶ï‡¶∞‡ßá
   - Token details log ‡¶ï‡¶∞‡ßá

‚úÖ checkNFTVerification(walletAddress)
   - Main verification function
   - SOL balance, NFTs, ‡¶è‡¶¨‡¶Ç SPL tokens check ‡¶ï‡¶∞‡ßá
   - Verification result return ‡¶ï‡¶∞‡ßá

HOW IT WORKS
============

1. **API Server Flow:**
   ```
   Frontend Request ‚Üí API Server ‚Üí verifier_js.py ‚Üí test_js.js ‚Üí Result
   ```

2. **JavaScript Execution:**
   - Python subprocess ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá Node.js script run ‡¶ï‡¶∞‡ßá
   - Wallet address pass ‡¶ï‡¶∞‡ßá
   - JSON output parse ‡¶ï‡¶∞‡ßá

3. **Verification Logic:**
   - ‡¶Ø‡¶¶‡¶ø wallet-‡¶è ‡¶ï‡ßã‡¶®‡ßã NFT ‡¶•‡¶æ‡¶ï‡ßá ‚Üí verification successful
   - ‡¶Ø‡¶¶‡¶ø wallet-‡¶è ‡¶ï‡ßã‡¶®‡ßã NFT ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá ‚Üí verification failed

TESTING THE INTEGRATION
======================

1. **Local Testing:**
```bash
cd api-server
npm install
node test_js.js EFwPVHhY6vH64MsMDx9ub8Edn4ktYYBcgqNYki1R3rmE
```

2. **API Testing:**
```bash
curl -X POST https://api-server-wcjc.onrender.com/api/verify-nft \
     -H "Content-Type: application/json" \
     -d '{"wallet_address":"EFwPVHhY6vH64MsMDx9ub8Edn4ktYYBcgqNYki1R3rmE","tg_id":"123"}'
```

3. **Frontend Testing:**
   - Frontend-‡¶è wallet connect ‡¶ï‡¶∞‡ßÅ‡¶®
   - NFT verification try ‡¶ï‡¶∞‡ßÅ‡¶®
   - Console-‡¶è results check ‡¶ï‡¶∞‡ßÅ‡¶®

DEPLOYMENT STEPS
================

1. **GitHub-‡¶è code push ‡¶ï‡¶∞‡ßÅ‡¶®:**
```bash
cd api-server
git add .
git commit -m "Integrate test.js functions for NFT verification"
git push origin main
```

2. **Render Dashboard-‡¶è redeploy ‡¶ï‡¶∞‡ßÅ‡¶®:**
   - https://dashboard.render.com ‡¶Ø‡¶æ‡¶®
   - API server service ‡¶ñ‡ßÅ‡¶≤‡ßÅ‡¶®
   - "Manual Deploy" click ‡¶ï‡¶∞‡ßÅ‡¶®

3. **Wait for deployment:**
   - Build complete ‡¶π‡¶ì‡¶Ø‡¶º‡¶æ ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ wait ‡¶ï‡¶∞‡ßÅ‡¶®
   - Logs check ‡¶ï‡¶∞‡ßÅ‡¶® errors ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ

VERIFICATION COMMANDS
====================

1. **Test JavaScript directly:**
```bash
cd api-server
node test_js.js EFwPVHhY6vH64MsMDx9ub8Edn4ktYYBcgqNYki1R3rmE
```

2. **Test API endpoint:**
```bash
curl https://api-server-wcjc.onrender.com/api/config
```

3. **Test NFT verification:**
```bash
curl -X POST https://api-server-wcjc.onrender.com/api/verify-nft \
     -H "Content-Type: application/json" \
     -d '{"wallet_address":"EFwPVHhY6vH64MsMDx9ub8Edn4ktYYBcgqNYki1R3rmE","tg_id":"123"}'
```

EXPECTED OUTPUT
==============

**JavaScript Output:**
```
üßæ Fetching data for wallet: EFwPVHhY6vH64MsMDx9ub8Edn4ktYYBcgqNYki1R3rmE

üí∞ SOL Balance: 0.123 SOL

üîé NFTs (5) owned by EFwPVHhY6vH64MsMDx9ub8Edn4ktYYBcgqNYki1R3rmE:
NFT #1
  Mint Address: ABC123...
  Name: Meta Betties #1
  URI: https://...
----------------------------

üé® Total NFTs found: 5

‚úÖ Wallet has 5 NFTs - verification successful

üìä Verification Result: { has_nft: true, nft_count: 5 }

‚úÖ Done.
```

**API Response:**
```json
{
  "has_nft": true,
  "nft_count": 5,
  "wallet_address": "EFwPVHhY6vH64MsMDx9ub8Edn4ktYYBcgqNYki1R3rmE",
  "message": "NFT verification completed (JavaScript approach)"
}
```

TROUBLESHOOTING
===============

**Problem 1: Node.js not found**
Solution:
- Render-‡¶è Node.js environment check ‡¶ï‡¶∞‡ßÅ‡¶®
- package.json file verify ‡¶ï‡¶∞‡ßÅ‡¶®

**Problem 2: Dependencies not installed**
Solution:
- render.yaml-‡¶è npm install command verify ‡¶ï‡¶∞‡ßÅ‡¶®
- Build logs check ‡¶ï‡¶∞‡ßÅ‡¶®

**Problem 3: JavaScript file not found**
Solution:
- test_js.js file api-server directory-‡¶§‡ßá ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ check ‡¶ï‡¶∞‡ßÅ‡¶®
- File path verify ‡¶ï‡¶∞‡ßÅ‡¶®

**Problem 4: Verification always fails**
Solution:
- JavaScript output logs check ‡¶ï‡¶∞‡ßÅ‡¶®
- Wallet address valid ‡¶ï‡¶ø‡¶®‡¶æ verify ‡¶ï‡¶∞‡ßÅ‡¶®
- Helius API key working ‡¶ï‡¶ø‡¶®‡¶æ test ‡¶ï‡¶∞‡ßÅ‡¶®

FINAL CHECKLIST
===============

‚ñ° test_js.js file created in api-server directory
‚ñ° package.json with Node.js dependencies
‚ñ° verifier_js.py updated to use test_js.js
‚ñ° render.yaml updated with npm install
‚ñ° Local testing successful
‚ñ° API server redeployed
‚ñ° Frontend integration working
‚ñ° NFT verification working

test.js functions successfully integrated! üöÄ 