NFT VERIFICATION PROCESS EXPLANATION
====================================

‡¶è‡¶á guide-‡¶è API server-‡¶è NFT verification ‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá ‡¶§‡¶æ ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§‡¶≠‡¶æ‡¶¨‡ßá explain ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§

OVERVIEW
--------
API server-‡¶è NFT verification ‡¶è‡¶ï‡¶ü‡¶ø multi-step process ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá:
1. Frontend ‡¶•‡ßá‡¶ï‡ßá wallet address ‡¶Ü‡¶∏‡ßá
2. JavaScript (Metaplex) ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá NFTs check ‡¶π‡¶Ø‡¶º
3. Result API server-‡¶è return ‡¶π‡¶Ø‡¶º
4. Bot server-‡¶è webhook send ‡¶π‡¶Ø‡¶º

STEP-BY-STEP PROCESS
====================

STEP 1: FRONTEND REQUEST
------------------------
```
Frontend ‚Üí API Server
POST /api/verify-nft
{
  "wallet_address": "EFwPVHhY6vH64MsMDx9ub8Edn4ktYYBcgqNYki1R3rmE",
  "tg_id": "123456"
}
```

STEP 2: API SERVER RECEIVES REQUEST
-----------------------------------
```python
# api_server.py - verify_nft function
def verify_nft():
    data = request.json
    wallet_address = data.get('wallet_address')
    tg_id = data.get('tg_id')
    
    print(f"üîç Verification request received:")
    print(f"  üë§ Telegram ID: {tg_id}")
    print(f"  üí∞ Wallet Address: {wallet_address}")
```

STEP 3: CALL JAVASCRIPT VERIFICATION
------------------------------------
```python
# verifier_js.py - has_nft function
def has_nft(wallet_address):
    return has_nft_js(wallet_address)

def has_nft_js(wallet_address):
    # Run JavaScript subprocess
    result = subprocess.run(
        ['node', 'test_js.js', wallet_address], 
        capture_output=True, 
        text=True, 
        timeout=60
    )
```

STEP 4: JAVASCRIPT NFT CHECKING
-------------------------------
```javascript
// test_js.js - checkNFTVerification function
async function checkNFTVerification(walletAddress) {
    // 1. Get SOL balance
    const solBalance = await getSolBalance(walletAddress);
    
    // 2. Get all NFTs
    const nftCount = await listNFTs(walletAddress);
    
    // 3. Get SPL tokens
    const tokenCount = await listSPLTokens(walletAddress);
    
    // 4. Check if wallet has NFTs
    if (nftCount > 0) {
        return { has_nft: true, nft_count: nftCount };
    } else {
        return { has_nft: false, nft_count: 0 };
    }
}
```

STEP 5: METAPLEX NFT FETCHING
-----------------------------
```javascript
// test_js.js - listNFTs function
async function listNFTs(walletAddress) {
    const owner = new PublicKey(walletAddress);
    const nfts = await metaplex.nfts().findAllByOwner({ owner });
    
    console.log(`üîé NFTs (${nfts.length}) owned by ${walletAddress}:`);
    nfts.forEach((nft, i) => {
        console.log(`NFT #${i + 1}`);
        console.log("  Mint Address:", nft.mintAddress.toString());
        console.log("  Name:", nft.name);
        console.log("  URI:", nft.uri);
    });
    
    return nfts.length;
}
```

STEP 6: RESULT PARSING
----------------------
```python
# verifier_js.py - Parse JavaScript output
if result.returncode == 0:
    output = result.stdout.strip()
    
    # Look for verification result
    if "verification successful" in output.lower():
        match = re.search(r'Total NFTs found: (\d+)', output)
        if match:
            nft_count = int(match.group(1))
            return True, nft_count
    elif "verification failed" in output.lower():
        return False, 0
```

STEP 7: API RESPONSE
--------------------
```python
# api_server.py - Return result
response = jsonify({
    "has_nft": has_required_nft,
    "nft_count": nft_count,
    "wallet_address": wallet_address,
    "message": "NFT verification completed (JavaScript approach)"
})
```

STEP 8: WEBHOOK TO BOT
----------------------
```python
# api_server.py - Send webhook
webhook_data = {
    "tg_id": tg_id,
    "has_nft": has_required_nft,
    "username": f"user_{tg_id}",
    "nft_count": nft_count
}

webhook_response = requests.post(WEBHOOK_URL, json=webhook_data, timeout=10)
```

DETAILED COMPONENTS
===================

1. **HELIUS API CONNECTION**
```javascript
const RPC_ENDPOINT = "https://mainnet.helius-rpc.com";
const HELIUS_API_KEY = "6873bd5e-0b5d-49c4-a9ab-4e7febfd9cd3";
const FULL_RPC = `${RPC_ENDPOINT}/?api-key=${HELIUS_API_KEY}`;

const connection = new Connection(FULL_RPC);
const metaplex = new Metaplex(connection);
```

2. **SOL BALANCE CHECK**
```javascript
async function getSolBalance(walletAddress) {
    const pubkey = new PublicKey(walletAddress);
    const lamports = await connection.getBalance(pubkey);
    return lamports / 1e9; // convert lamports to SOL
}
```

3. **NFT FETCHING WITH METAPLEX**
```javascript
async function listNFTs(walletAddress) {
    const owner = new PublicKey(walletAddress);
    const nfts = await metaplex.nfts().findAllByOwner({ owner });
    return nfts.length;
}
```

4. **SPL TOKEN CHECKING**
```javascript
async function listSPLTokens(walletAddress) {
    const owner = new PublicKey(walletAddress);
    const tokenAccounts = await connection.getParsedTokenAccountsByOwner(owner, {
        programId: new PublicKey("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"),
    });
    
    const nonZeroTokens = tokenAccounts.value.filter(({ account }) => {
        const amountInfo = account.data.parsed.info.tokenAmount;
        return amountInfo.uiAmount > 0;
    });
    
    return nonZeroTokens.length;
}
```

VERIFICATION LOGIC
=================

**SUCCESS CONDITIONS:**
- ‚úÖ Wallet-‡¶è ‡¶ï‡¶Æ‡¶™‡¶ï‡ßç‡¶∑‡ßá 1‡¶ü‡¶ø NFT ‡¶•‡¶æ‡¶ï‡¶§‡ßá ‡¶π‡¶¨‡ßá
- ‚úÖ NFT count > 0 ‡¶π‡¶≤‡ßá verification successful
- ‚úÖ NFT count = 0 ‡¶π‡¶≤‡ßá verification failed

**FAILURE CONDITIONS:**
- ‚ùå Wallet address invalid ‡¶π‡¶≤‡ßá
- ‚ùå Helius API error ‡¶π‡¶≤‡ßá
- ‚ùå JavaScript subprocess timeout ‡¶π‡¶≤‡ßá
- ‚ùå ‡¶ï‡ßã‡¶®‡ßã NFT ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá

ERROR HANDLING
==============

1. **Invalid Wallet Address:**
```javascript
try {
    const pubkey = new PublicKey(walletAddress);
} catch (error) {
    console.error("Invalid wallet address");
    return { has_nft: false, nft_count: 0, error: "Invalid address" };
}
```

2. **API Connection Error:**
```javascript
try {
    const nfts = await metaplex.nfts().findAllByOwner({ owner });
} catch (error) {
    console.error("API connection failed");
    return { has_nft: false, nft_count: 0, error: "API error" };
}
```

3. **Python Subprocess Error:**
```python
try:
    result = subprocess.run(['node', 'test_js.js', wallet_address], ...)
except subprocess.TimeoutExpired:
    print("JavaScript subprocess timed out")
    return False, 0
except Exception as e:
    print(f"Error running JavaScript: {e}")
    return False, 0
```

EXAMPLE FLOW
===========

**Input:**
```json
{
  "wallet_address": "EFwPVHhY6vH64MsMDx9ub8Edn4ktYYBcgqNYki1R3rmE",
  "tg_id": "123456"
}
```

**JavaScript Output:**
```
üßæ Fetching data for wallet: EFwPVHhY6vH64MsMDx9ub8Edn4ktYYBcgqNYki1R3rmE

üí∞ SOL Balance: 0.123 SOL

üîé NFTs (3) owned by EFwPVHhY6vH64MsMDx9ub8Edn4ktYYBcgqNYki1R3rmE:
NFT #1
  Mint Address: ABC123...
  Name: Meta Betties #1
  URI: https://...
----------------------------

üé® Total NFTs found: 3

‚úÖ Wallet has 3 NFTs - verification successful

üìä Verification Result: { has_nft: true, nft_count: 3 }

‚úÖ Done.
```

**API Response:**
```json
{
  "has_nft": true,
  "nft_count": 3,
  "wallet_address": "EFwPVHhY6vH64MsMDx9ub8Edn4ktYYBcgqNYki1R3rmE",
  "message": "NFT verification completed (JavaScript approach)"
}
```

**Webhook to Bot:**
```json
{
  "tg_id": "123456",
  "has_nft": true,
  "username": "user_123456",
  "nft_count": 3
}
```

PERFORMANCE OPTIMIZATION
=======================

1. **Timeout Settings:**
   - JavaScript subprocess: 60 seconds
   - Webhook request: 10 seconds
   - API requests: 30 seconds

2. **Caching:**
   - NFT results cache ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º
   - Balance check cache ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º

3. **Error Recovery:**
   - Retry mechanism add ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º
   - Fallback API use ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º

SECURITY CONSIDERATIONS
======================

1. **Input Validation:**
   - Wallet address format check
   - Telegram ID validation
   - Request size limits

2. **API Key Protection:**
   - Environment variables use
   - API key rotation
   - Rate limiting

3. **Error Handling:**
   - Sensitive data ‡¶®‡¶æ log ‡¶ï‡¶∞‡¶æ
   - Generic error messages
   - Proper HTTP status codes

TESTING STRATEGY
================

1. **Unit Testing:**
```bash
# Test JavaScript directly
node test_js.js EFwPVHhY6vH64MsMDx9ub8Edn4ktYYBcgqNYki1R3rmE
```

2. **API Testing:**
```bash
# Test API endpoint
curl -X POST https://api-server-wcjc.onrender.com/api/verify-nft \
     -H "Content-Type: application/json" \
     -d '{"wallet_address":"EFwPVHhY6vH64MsMDx9ub8Edn4ktYYBcgqNYki1R3rmE","tg_id":"123"}'
```

3. **Integration Testing:**
   - Frontend ‚Üí API ‚Üí JavaScript ‚Üí Bot flow
   - Error scenarios testing
   - Performance testing

‡¶è‡¶á process-‡¶è NFT verification ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶π‡¶Ø‡¶º ‡¶è‡¶¨‡¶Ç user-‡¶ï‡ßá Telegram group-‡¶è access ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶Ø‡¶º! üöÄ 