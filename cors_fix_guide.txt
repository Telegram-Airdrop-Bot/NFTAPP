CORS ERROR FIX GUIDE
====================

‡¶è‡¶á CORS error fix ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø API server redeploy ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§

ERROR DETAILS
-------------
Error: Access to fetch at 'https://api-server-wcjc.onrender.com/api/config' 
from origin 'https://admin-q2j7.onrender.com' has been blocked by CORS policy

CAUSE
-----
API server-‡¶è CORS configuration properly set ‡¶ï‡¶∞‡¶æ ‡¶õ‡¶ø‡¶≤ ‡¶®‡¶æ‡•§

SOLUTION
--------

STEP 1: API SERVER CODE UPDATED
-------------------------------
‚úÖ api-server/api_server.py file update ‡¶ï‡¶∞‡ßá‡¶õ‡¶ø:
- Specific origins allow ‡¶ï‡¶∞‡ßá‡¶õ‡¶ø
- Better CORS headers add ‡¶ï‡¶∞‡ßá‡¶õ‡¶ø
- OPTIONS handler add ‡¶ï‡¶∞‡ßá‡¶õ‡¶ø
- All endpoints-‡¶è CORS headers add ‡¶ï‡¶∞‡ßá‡¶õ‡¶ø

STEP 2: REDEPLOY API SERVER
---------------------------

2.1 GitHub-‡¶è code push ‡¶ï‡¶∞‡ßÅ‡¶®:
```bash
cd api-server
git add .
git commit -m "Fix CORS configuration for frontend access"
git push origin main
```

2.2 Render Dashboard-‡¶è ‡¶Ø‡¶æ‡¶®:
- https://dashboard.render.com
- ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ API server service ‡¶ñ‡ßÅ‡¶≤‡ßÅ‡¶®
- "Manual Deploy" button click ‡¶ï‡¶∞‡ßÅ‡¶®

2.3 Wait for deployment:
- Build complete ‡¶π‡¶ì‡¶Ø‡¶º‡¶æ ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ wait ‡¶ï‡¶∞‡ßÅ‡¶®
- Logs check ‡¶ï‡¶∞‡ßÅ‡¶® errors ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ

STEP 3: TEST CORS FIX
---------------------

3.1 Test API directly:
```bash
curl -H "Origin: https://admin-q2j7.onrender.com" \
     -H "Access-Control-Request-Method: GET" \
     -H "Access-Control-Request-Headers: Content-Type" \
     -X OPTIONS \
     https://api-server-wcjc.onrender.com/api/config
```

3.2 Test from browser:
- Browser-‡¶è https://admin-q2j7.onrender.com ‡¶Ø‡¶æ‡¶®
- Developer Tools ‡¶ñ‡ßÅ‡¶≤‡ßÅ‡¶® (F12)
- Console tab-‡¶è check ‡¶ï‡¶∞‡ßÅ‡¶® CORS error gone ‡¶ï‡¶ø‡¶®‡¶æ

STEP 4: VERIFY ALL ENDPOINTS
----------------------------

4.1 Test config endpoint:
```bash
curl https://api-server-wcjc.onrender.com/api/config
```

4.2 Test verify endpoint:
```bash
curl -X POST https://api-server-wcjc.onrender.com/api/verify-nft \
     -H "Content-Type: application/json" \
     -d '{"wallet_address":"test","tg_id":"123"}'
```

4.3 Test NFT assets endpoint:
```bash
curl "https://api-server-wcjc.onrender.com/api/addresses/test/nft-assets?api-key=test"
```

CHANGES MADE
------------

1. **CORS Configuration Updated:**
   - Specific origins allow ‡¶ï‡¶∞‡ßá‡¶õ‡¶ø
   - Your frontend URL add ‡¶ï‡¶∞‡ßá‡¶õ‡¶ø
   - Local development URLs add ‡¶ï‡¶∞‡ßá‡¶õ‡¶ø

2. **Headers Added:**
   - Access-Control-Allow-Origin: *
   - Access-Control-Allow-Headers: Content-Type,Authorization,X-Requested-With
   - Access-Control-Allow-Methods: GET,POST,OPTIONS
   - Access-Control-Allow-Credentials: true
   - Access-Control-Max-Age: 3600

3. **OPTIONS Handler Added:**
   - Preflight requests handle ‡¶ï‡¶∞‡¶¨‡ßá
   - All endpoints-‡¶è OPTIONS support

4. **All Endpoints Updated:**
   - /api/config
   - /api/verify-nft
   - /api/addresses/<wallet>/nft-assets

ALLOWED ORIGINS
---------------
‚úÖ https://admin-q2j7.onrender.com
‚úÖ https://meta-betties-frontend.onrender.com
‚úÖ https://meta-betties-frontend-*.onrender.com
‚úÖ http://localhost:3000
‚úÖ http://localhost:3001
‚úÖ http://127.0.0.1:3000
‚úÖ http://127.0.0.1:3001

TROUBLESHOOTING
---------------

Problem 1: Still getting CORS error
Solution:
- API server redeploy ‡¶ï‡¶∞‡ßÅ‡¶®
- Browser cache clear ‡¶ï‡¶∞‡ßÅ‡¶®
- Check if deployment successful

Problem 2: API server not responding
Solution:
- Render logs check ‡¶ï‡¶∞‡ßÅ‡¶®
- Environment variables verify ‡¶ï‡¶∞‡ßÅ‡¶®
- Restart deployment

Problem 3: Frontend still can't connect
Solution:
- Frontend URL verify ‡¶ï‡¶∞‡ßÅ‡¶®
- API URL verify ‡¶ï‡¶∞‡ßÅ‡¶®
- Network tab-‡¶è check ‡¶ï‡¶∞‡ßÅ‡¶®

FINAL TEST
----------

1. Frontend-‡¶è ‡¶Ø‡¶æ‡¶®
2. Wallet connect ‡¶ï‡¶∞‡ßÅ‡¶®
3. NFT verification try ‡¶ï‡¶∞‡ßÅ‡¶®
4. Console-‡¶è errors check ‡¶ï‡¶∞‡ßÅ‡¶®

CORS error fix ‡¶π‡¶Ø‡¶º‡ßá ‡¶Ø‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶â‡¶ö‡¶ø‡¶§! üöÄ 